}
rf_cv = tibble(m = mvalues, oob_err = oob_errors) %>%
ggplot(aes(x = m, y = oob_err)) +
geom_line() + geom_point() +
scale_x_continuous(breaks = mvalues) +
theme_bw()
rf_cv
png(width = 7,
height = 7,
res = 300,
units = "in",
filename = "results/rf-cv-plot.png")
png(width = 7,
height = 7,
res = 300,
units = "in",
filename = "results/rf-cv-plot.png")
plot(rf_cv)
dev.off()
# tune random forest
set.seed(1)
rf_fit_tuned = randomForest(mentally_unhealthy_days ~ . -physically_unhealthy_days,
mtry = 31,
ntree = 500,
importance = TRUE,
data = mental_health_train)
save(rf_fit_tuned, file = "results/rf_fit_tuned.Rda")
png(width = 7,
height = 7,
res = 300,
units = "in",
filename = "results/rf-fit-tuned.png")
plot(rf_fit_tuned)
dev.off()
# variable importance
var_imp = varImpPlot(rf_fit_tuned, n.var = 10, cex = 0.4)
var_imp
# mean-squared error
pred_rf_test = predict(rf_fit_tuned,
newdata = mental_health_test)
pred_rf_test
pred_rf_train = predict(rf_fit_tuned,
newdata = mental_health_train)
mse_rf_test = mean((pred_rf_test - mental_health_test$mentally_unhealthy_days)^2) %>%
as_tibble()
mse_rf_test
mse_rf_train = mean((pred_rf_train - mental_health_train$mentally_unhealthy_days)^2) %>%
as_tibble()
mse_rf_train
# load libraries
library(rpart)         # to train decision trees
library(rpart.plot)    # to plot decision trees
library(randomForest)  # random forests
library(gbm)           # boosting
library(tidyverse)     # tidyverse
library(kableExtra)    # kable
# read in the training data
mental_health_train = read_csv("data/clean/mental_health_train.csv")
# read in the testing data
mental_health_test = read_csv("data/clean/mental_health_test.csv")
gbm_fit = gbm(mentally_unhealthy_days ~ . -physically_unhealthy_days,
distribution = "gaussian",
n.trees = 100,
interaction.depth = 1,
shrinkage = 0.1,
cv.folds = 5,
data = mental_health_train)
rpart.plot(optimal_tree)
rf_fit_tuned = randomForest(mentally_unhealthy_days ~ . -physically_unhealthy_days,
mtry = 31,
ntree = 500,
importance = TRUE,
data = mental_health_train)
save(rf_fit_tuned, file = "results/rf_fit_tuned.Rda")
# variable importance
png("varimp.png")
varImpPlot(rf_fit_tuned, n.var = 10, cex = 0.4)
png("varimp.png")
varImpPlot(rf_fit_tuned, n.var = 10, cex = 0.4)
dev.off()
png("varimp.png")
varImpPlot(rf_fit_tuned, n.var = 10, cex = 0.4)
dev.off()
png("varimp.png")
varImpPlot(rf_fit_tuned, n.var = 10, cex = 0.4)
dev.off()
png("varimp2.png")
varImpPlot(rf_fit_tuned, n.var = 10, cex = 0.4)
dev.off()
png("varimp2.png")
varImpPlot(rf_fit_tuned, n.var = 10, cex = 0.6)
dev.off()
varImpPlot(rf_fit_tuned, n.var = 10)
png("varimp2.png")
varImpPlot(rf_fit_tuned, n.var = 10)
dev.off()
varImpPlot(rf_fit_tuned, n.var = 10, cex = 0.8)
png("varimp2.png")
varImpPlot(rf_fit_tuned, n.var = 10, cex = 0.8)
dev.off()
# mean squared error
predictions_gbm = predict(gbm_fit_tuned,
n.trees = optimal_num_trees,
newdata = spam_test)
# load libraries
library(tidyverse)
# read in the training data
mental_health_train = read_csv("data/clean/mental_health_train.csv")
# read in the testing data
mental_health_test = read_csv("data/clean/mental_health_test.csv")
# running a logistic regression
lm_fit = lm(mentally_unhealthy_days ~ . -physically_unhealthy_days,
data = mental_health_train)
summary(lm_fit)
View(summary(lm_fit))
fit = summary(lm_fit)
kable(fit)
# correlated features - health_outcomes
health_outcomes = mental_health_train %>%
select(physically_unhealthy_days,
life_expectancy, perc_diabetic)
p4 = ggcorrplot(cor(health_outcomes),
colors = c("dark green", "white", "light green"),
hc.order = TRUE,
type = "lower",
lab = TRUE,
lab_size = 4,
ggtheme = ggplot2::theme_bw())
p4
colors = c(#1d3019, "white", "light green"),
p4 = ggcorrplot(cor(health_outcomes),
colors = c(c(#1d3019), "white", "light green"),
p4 = ggcorrplot(cor(health_outcomes),
colors = c("#1d3019", "white", "light green"),
hc.order = TRUE,
type = "lower",
lab = TRUE,
lab_size = 4,
ggtheme = ggplot2::theme_bw())
p4
p4 = ggcorrplot(cor(health_outcomes),
colors = c("#1d3019", "white", "light green"),
hc.order = TRUE,
type = "lower",
lab = TRUE,
lab_size = 4,
ggtheme = ggplot2::theme_bw())
p4 = ggcorrplot(cor(health_outcomes),
colors = c("#1d3019", "#FFFFFF", "#afd0a9"),
hc.order = TRUE,
type = "lower",
lab = TRUE,
lab_size = 4,
ggtheme = ggplot2::theme_bw())
p4
p4 = ggcorrplot(cor(health_outcomes),
colors = c("#396031", "#FFFFFF", "#afd0a9"),
hc.order = TRUE,
type = "lower",
lab = TRUE,
lab_size = 4,
ggtheme = ggplot2::theme_bw())
p4
p4 = ggcorrplot(cor(health_outcomes),
colors = c("#305029", "#FFFFFF", "#afd0a9"),
hc.order = TRUE,
type = "lower",
lab = TRUE,
lab_size = 4,
ggtheme = ggplot2::theme_bw())
p4
p4 = ggcorrplot(cor(health_outcomes),
colors = c("#305029", "#FFFFFF", "#afd0a9"),
hc.order = TRUE,
type = "lower",
lab = TRUE,
lab_size = 2,
ggtheme = ggplot2::theme_bw())
p4
p4 = ggcorrplot(cor(health_outcomes),
colors = c("#305029", "#FFFFFF", "#afd0a9"),
hc.order = TRUE,
type = "lower",
lab = TRUE,
lab_size = 4,
ggtheme = ggplot2::theme_bw())
p4 = ggcorrplot(cor(health_outcomes),
colors = c("#305029", "#FFFFFF", "#afd0a9"),
hc.order = TRUE,
type = "lower",
lab = TRUE,
lab_size = 4,
tl.cex = 4,
ggtheme = ggplot2::theme_bw())
p4
p4 = ggcorrplot(cor(health_outcomes),
colors = c("#305029", "#FFFFFF", "#afd0a9"),
hc.order = TRUE,
type = "lower",
lab = TRUE,
lab_size = 4,
tl.cex = 5,
ggtheme = ggplot2::theme_bw())
p4
p4 = ggcorrplot(cor(health_outcomes),
colors = c("#305029", "#FFFFFF", "#afd0a9"),
hc.order = TRUE,
type = "lower",
lab = TRUE,
lab_size = 4,
tl.cex = 7,
ggtheme = ggplot2::theme_bw())
p4
p4 = ggcorrplot(cor(health_outcomes),
colors = c("#305029", "#FFFFFF", "#afd0a9"),
hc.order = TRUE,
type = "lower",
lab = TRUE,
lab_size = 4,
tl.cex = 8,
ggtheme = ggplot2::theme_bw())
p4
# load libraries
library(tidyverse)
library(ggcorrplot)
# read in the cleaned data
mental_health_clean = read_csv("data/clean/mental_health_clean.csv")
# read in training data
mental_health_train = read_csv("data/clean/mental_health_train.csv")
# correlated features - health_outcomes
health_outcomes = mental_health_train %>%
select(physically_unhealthy_days,
life_expectancy, perc_diabetic)
p4 = ggcorrplot(cor(health_outcomes),
colors = c("#305029", "#FFFFFF", "#afd0a9"),
hc.order = TRUE,
type = "lower",
lab = TRUE,
lab_size = 4,
tl.cex = 8,
ggtheme = ggplot2::theme_bw())
ggsave(filename = "results/corr-health_outcomes.png",
plot = p4,
device = "png",
width = 5,
height = 5)
p5 = ggcorrplot(cor(health_behavior),
colors = c("#305029", "#FFFFFF", "#afd0a9"),
hc.order = TRUE,
type = "lower",
lab = TRUE,
lab_size = 2,
tl.cex = 7,
ggtheme = ggplot2::theme_bw())
p5
p5 = ggcorrplot(cor(health_behavior),
colors = c("#305029", "#FFFFFF", "#a64d4d"),
hc.order = TRUE,
type = "lower",
lab = TRUE,
lab_size = 2,
tl.cex = 7,
ggtheme = ggplot2::theme_bw())
p5
p5 = ggcorrplot(cor(health_behavior),
colors = c("#305029", "#FFFFFF", "#993333"),
hc.order = TRUE,
type = "lower",
lab = TRUE,
lab_size = 2,
tl.cex = 7,
ggtheme = ggplot2::theme_bw())
p5
p5 = ggcorrplot(cor(health_behavior),
colors = c("#305029", "#FFFFFF", "#8d1919"),
hc.order = TRUE,
type = "lower",
lab = TRUE,
lab_size = 2,
tl.cex = 7,
ggtheme = ggplot2::theme_bw())
p5
p4 = ggcorrplot(cor(health_outcomes),
colors = c("#305029", "#FFFFFF", "#8d1919"),
hc.order = TRUE,
type = "lower",
lab = TRUE,
lab_size = 4,
tl.cex = 8,
ggtheme = ggplot2::theme_bw())
p4
# correlated features - clinical care
clinical_care = mental_health_train %>%
select(perc_uninsured, pcp_rate, dentist_rate,
mhp_rate, prevent_hosp_rate,
perc_mammography_screened, perc_flu_vaccinated)
p6 = ggcorrplot(cor(clinical_care),
colors = c("#305029", "#FFFFFF", "#8d1919"),
hc.order = TRUE,
type = "lower",
lab = TRUE,
lab_size = 3,
tl.cex = 8,
ggtheme = ggplot2::theme_bw())
p6
p6 = ggcorrplot(cor(clinical_care),
colors = c("#305029", "#FFFFFF", "#8d1919"),
hc.order = TRUE,
type = "lower",
lab = TRUE,
lab_size = 2,
tl.cex = 8,
ggtheme = ggplot2::theme_bw())
p6
# correlated features - social_environment
social_economic_environment = mental_health_train %>%
select(graduation_rate, perc_some_college,
perc_unemployed, perc_children_in_poverty,
perc_single_parent_households,
association_rate, violent_crime_rate,
injury_death_rate, household_income,
perc_free_or_reduced_lunch, perc_homeowners,
household_has_broadband,
household_has_computer, household_has_smartphone,
housing_mobile_homes, per_capita_income,
persons_per_household, income_ratio,
perc_with_access, perc_limited_access, food_environment_index)
p7 = ggcorrplot(cor(social_economic_environment),
colors = c("#305029", "#FFFFFF", "#8d1919"),
hc.order = FALSE,
type = "lower",
lab = TRUE,
lab_size = 1.5,
tl.cex = 6.5,
ggtheme = ggplot2::theme_bw())
p7
ggsave(filename = "results/corr-social-economic-environment.png",
plot = p7,
device = "png",
width = 6,
height = 6)
physical_environment = mental_health_train %>%
select(average_daily_pm2.5, presence_of_violation, perc_severe_housing_cost_burden,
perc_severe_housing_problems,
overcrowding, inadequate_facilities, perc_drive_alone,
perc_long_commute_drives_alone, perc_rural)
p8 = ggcorrplot(cor(physical_environment),
colors = c("#305029", "#FFFFFF", "#8d1919"),
hc.order = TRUE,
type = "lower",
lab = TRUE,
lab_size = 2,
tl.cex = 6.5,
outline.color = "gray",
ggtheme = ggplot2::theme_bw())
p8
ggsave(filename = "results/corr-physical-environment.png",
plot = p8,
device = "png",
width = 5,
height = 5)
# load libraries
library(tidyverse)
library(ggcorrplot)
# read in the cleaned data
mental_health_clean = read_csv("data/clean/mental_health_clean.csv")
# read in training data
mental_health_train = read_csv("data/clean/mental_health_train.csv")
# correlated features - health_outcomes
health_outcomes = mental_health_train %>%
select(physically_unhealthy_days,
life_expectancy, perc_diabetic)
# plot mentally_unhealthy days and draw line at the mean
p = mental_health_clean %>%
ggplot(aes(x = mentally_unhealthy_days)) +
geom_histogram(fill = "light grey",
col = "black") +
geom_vline(xintercept = mean,
linetype = "dashed",
col = "red") +
geom_vline(xintercept = cutoff,
linetype = "dashed",
col = "blue") +
labs(x = "Mentally Unhealthy Days (Per Month)",
y = "Number of Counties") +
theme_bw() +
ggtitle("Histogram of Mentally Unhealthy Days")
p
# plot mentally_unhealthy days and draw line at the mean
p = mental_health_clean %>%
ggplot(aes(x = mentally_unhealthy_days)) +
geom_histogram(fill = "#305029",
col = "black") +
geom_vline(xintercept = mean,
linetype = "dashed",
col = "red") +
geom_vline(xintercept = cutoff,
linetype = "dashed",
col = "blue") +
labs(x = "Mentally Unhealthy Days (Per Month)",
y = "Number of Counties") +
theme_bw() +
ggtitle("Histogram of Mentally Unhealthy Days")
p
# plot mentally_unhealthy days and draw line at the mean
p = mental_health_clean %>%
ggplot(aes(x = mentally_unhealthy_days)) +
geom_histogram(fill = "#a9ba9d",
col = "#305029") +
geom_vline(xintercept = mean,
linetype = "dashed",
col = "red") +
geom_vline(xintercept = cutoff,
linetype = "dashed",
col = "blue") +
labs(x = "Mentally Unhealthy Days (Per Month)",
y = "Number of Counties") +
theme_bw() +
ggtitle("Histogram of Mentally Unhealthy Days")
p
p = mental_health_clean %>%
ggplot(aes(x = mentally_unhealthy_days)) +
geom_histogram(fill = "#a9ba9d",
col = "#305029") +
geom_vline(xintercept = mean,
linetype = "dashed",
col = "red") +
labs(x = "Mentally Unhealthy Days (Per Month)",
y = "Number of Counties") +
theme_bw() +
ggtitle("Histogram of Mentally Unhealthy Days")
p
# create a heatmap of mentally unhealthy days for cleaned dataset (this is just showing what the data looks like)
p2 = map_data("county") %>%
as_tibble() %>%
left_join(mental_health_clean %>%
rename(region = state,
subregion = name,
`Mentally Unhealthy Days` = mentally_unhealthy_days) %>%
mutate(region = str_to_lower(region),
subregion = str_to_lower(subregion)),
by = c("region", "subregion")) %>%
ggplot() +
geom_polygon(data=map_data("state"),
aes(x=long, y=lat, group=group),
color="black", fill=NA,  size = 1, alpha = .3) +
geom_polygon(aes(x=long, y=lat, group=group, fill = `Mentally Unhealthy Days`),
color="darkblue", size = .1) +
scale_fill_gradient(low = "#305029", high = "#b7bca2") +
theme_void() +
ggtitle("Heat Map - Cleaned Dataset")
p2
# create a heatmap of mentally unhealthy days for cleaned dataset (this is just showing what the data looks like)
p2 = map_data("county") %>%
as_tibble() %>%
left_join(mental_health_clean %>%
rename(region = state,
subregion = name,
`Mentally Unhealthy Days` = mentally_unhealthy_days) %>%
mutate(region = str_to_lower(region),
subregion = str_to_lower(subregion)),
by = c("region", "subregion")) %>%
ggplot() +
geom_polygon(data=map_data("state"),
aes(x=long, y=lat, group=group),
color="black", fill=NA,  size = 1, alpha = .3) +
geom_polygon(aes(x=long, y=lat, group=group, fill = `Mentally Unhealthy Days`),
color="darkblue", size = .1) +
scale_fill_gradient(high = "#1b2418", low = "#b7bca2") +
theme_void() +
ggtitle("Heat Map - Cleaned Dataset")
p2
# create a heatmap of mentally unhealthy days for cleaned dataset (this is just showing what the data looks like)
p2 = map_data("county") %>%
as_tibble() %>%
left_join(mental_health_clean %>%
rename(region = state,
subregion = name,
`Mentally Unhealthy Days` = mentally_unhealthy_days) %>%
mutate(region = str_to_lower(region),
subregion = str_to_lower(subregion)),
by = c("region", "subregion")) %>%
ggplot() +
geom_polygon(data=map_data("state"),
aes(x=long, y=lat, group=group),
color="black", fill=NA,  size = 1, alpha = .3) +
geom_polygon(aes(x=long, y=lat, group=group, fill = `Mentally Unhealthy Days`),
color="darkblue", size = .1) +
scale_fill_gradient(high = "#1b2418", low = "#8d1919") +
theme_void() +
ggtitle("Heat Map - Cleaned Dataset")
p2
# create a heatmap of mentally unhealthy days for cleaned dataset (this is just showing what the data looks like)
p2 = map_data("county") %>%
as_tibble() %>%
left_join(mental_health_clean %>%
rename(region = state,
subregion = name,
`Mentally Unhealthy Days` = mentally_unhealthy_days) %>%
mutate(region = str_to_lower(region),
subregion = str_to_lower(subregion)),
by = c("region", "subregion")) %>%
ggplot() +
geom_polygon(data=map_data("state"),
aes(x=long, y=lat, group=group),
color="black", fill=NA,  size = 1, alpha = .3) +
geom_polygon(aes(x=long, y=lat, group=group, fill = `Mentally Unhealthy Days`),
color="darkblue", size = .1) +
scale_fill_gradient(high = "#8d1919", low = "#b7bca2") +
theme_void() +
ggtitle("Heat Map - Cleaned Dataset")
p2
