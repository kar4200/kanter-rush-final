by = c("region", "subregion")) %>%
ggplot() +
geom_polygon(data=map_data("state"),
aes(x=long, y=lat, group=group),
color="black", fill=NA,  size = 1, alpha = .3) +
geom_polygon(aes(x=long, y=lat, group=group, fill = `Mentally Unhealthy Days`),
color="darkblue", size = .1) +
scale_fill_gradient(low = "blue", high = "red") +
theme_void() +
ggtitle("Heat Map - Cleaned Dataset")
ggsave(filename = "results/map-clean.png",
plot = p2,
device = "png",
width = 7,
height = 4)
p3 = map_data("county") %>%
as_tibble() %>%
left_join(health_total %>%
rename(region = state,
subregion = name,
`Mentally Unhealthy Days` = `Mentally Unhealthy Days`) %>%
mutate(region = str_to_lower(region),
subregion = str_to_lower(subregion)),
by = c("region", "subregion")) %>%
ggplot() +
geom_polygon(data=map_data("state"),
aes(x=long, y=lat, group=group),
color="black", fill=NA,  size = 1, alpha = .3) +
geom_polygon(aes(x=long, y=lat, group=group, fill = `Mentally Unhealthy Days`),
color="darkblue", size = .1) +
scale_fill_gradient(low = "blue", high = "red") +
theme_void() +
ggtitle("Heat Map - Full Dataset")
ggsave(filename = "results/map-total.png",
plot = p3,
device = "png",
width = 7,
height = 4)
# create heatmap of highest mentally unhappy days
wv = map_data("county") %>%
as_tibble() %>%
filter(region == "west virginia") %>%
left_join(mental_health_clean %>%
rename(region = state,
subregion = name,
`Mentally Unhealthy Days` = mentally_unhealthy_days) %>%
mutate(region = str_to_lower(region),
subregion = str_to_lower(subregion)),
by = c("region", "subregion")) %>%
ggplot() +
geom_polygon(data=map_data("state") %>% filter(region == "west virginia"),
aes(x=long, y=lat, group=group),
color="black", fill=NA, size = 1, alpha = .3) +
geom_polygon(aes(x=long, y=lat, group=group, fill = `Mentally Unhealthy Days`),
color="darkblue", size = .1) +
scale_fill_gradient(low = "blue", high = "red") +
theme_void() +
ggtitle("West Virginia Heat Map")
ggsave(filename = "results/west-va.png",
plot = wv,
device = "png",
width = 7,
height = 4)
nd = map_data("county") %>%
as_tibble() %>%
filter(region == "north dakota") %>%
left_join(mental_health_clean %>%
rename(region = state,
subregion = name,
`Mentally Unhealthy Days` = mentally_unhealthy_days) %>%
mutate(region = str_to_lower(region),
subregion = str_to_lower(subregion)),
by = c("region", "subregion")) %>%
ggplot() +
geom_polygon(data=map_data("state") %>% filter(region == "north dakota"),
aes(x=long, y=lat, group=group),
color="black", fill=NA, size = 1, alpha = .3) +
geom_polygon(aes(x=long, y=lat, group=group, fill = `Mentally Unhealthy Days`),
color="darkblue", size = .1) +
scale_fill_gradient(low = "blue", high = "red") +
theme_void() +
ggtitle("North Dakota Heat Map")
ggsave(filename = "results/north-dakota.png",
plot = nd,
device = "png",
width = 7,
height = 4)
# load libraries
library(tidyverse)
# read in the cleaned data
mental_health_clean = read_csv("data/clean/mental_health_clean.csv")
# read in training data
mental_health_train = read_csv("data/clean/mental_health_train.csv")
# health outcomes
# physically unhealthy days
p9 = ggplot(data = mental_health_train,
aes(x = physically_unhealthy_days,
y = mentally_unhealthy)) +
geom_point() +
stat_smooth(method="glm", se=FALSE,
method.args = list(family=binomial),
color = "red") +
theme_bw() +
labs(x = "Physically Unhealthy Days", y = "Mentally Unhealthy") +
ggtitle("Physically Unhealthy Days")
ggsave(filename = "results/physically_unhealthy_days.png",
plot = p9,
device = "png",
width = 5,
height = 5)
# health behaviors
# smoking
p11 = ggplot(data = mental_health_train,
aes(x = perc_smokers,
y = mentally_unhealthy)) +
geom_point() +
stat_smooth(method="glm", se=FALSE,
method.args = list(family=binomial),
color = "red") +
theme_bw() +
labs(x = "Percentage of adults that reported currently smoking", y = "Mentally Unhealthy") +
ggtitle("Smoking")
ggsave(filename = "results/smoking.png",
plot = p11,
device = "png",
width = 5,
height = 5)
# clinical care
# mhp rate
p13 = ggplot(data = mental_health_train,
aes(x = mhp_rate,
y = mentally_unhealthy)) +
geom_point() +
xlab("Mental Health Providers per 100,000 population") +
ylab("Mentally Unhealthy") +
stat_smooth(method="glm", se=FALSE,
method.args = list(family=binomial),
color = "red") +
theme_bw() +
ggtitle("MHP Providers")
ggsave(filename = "results/mhp_rate.png",
plot = p13,
device = "png",
width = 5,
height = 5)
# social / economic environment
# household income
p14 = ggplot(data = mental_health_train,
aes(x = household_income,
y = mentally_unhealthy)) +
geom_point() +
xlab("Household Income") +
ylab("Mentally Unhealthy") +
stat_smooth(method="glm", se=FALSE,
method.args = list(family=binomial),
color = "red") +
theme_bw() +
ggtitle("Household Income")
ggsave(filename = "results/household_income.png",
plot = p14,
device = "png",
width = 5,
height = 5)
# physical environment
# inadequate facilities
p16 = ggplot(data = mental_health_train,
aes(x = inadequate_facilities,
y = mentally_unhealthy)) +
geom_point() +
xlab("Percentage of households without kitchen or plumbing facilities") +
ylab("Mentally Unhealthy") +
stat_smooth(method="glm", se=FALSE,
method.args = list(family=binomial),
color = "red") +
theme_bw() +
ggtitle("Inadequate Household Facilities")
ggsave(filename = "results/inadequate_facilities.png",
plot = p16,
device = "png",
width = 5,
height = 5)
p17 = ggplot(data = mental_health_train,
aes(x = perc_excessive_drinking,
y = mentally_unhealthy)) +
geom_point() +
xlab("Percentage of adults that reported excessive drinking") +
ylab("Mentally Unhealthy") +
stat_smooth(method="glm", se=FALSE,
method.args = list(family=binomial),
color = "red") +
theme_bw() +
ggtitle("Excessive Drinking")
ggsave(filename = "results/excessive-drinking.png",
plot = p17,
device = "png",
width = 5,
height = 5)
# load libraries
library(tidyverse)
library(ggcorrplot)
# read in the cleaned data
mental_health_clean = read_csv("data/clean/mental_health_clean.csv")
# read in training data
mental_health_train = read_csv("data/clean/mental_health_train.csv")
# correlated features - health_outcomes
health_outcomes = mental_health_train %>%
select(physically_unhealthy_days,
life_expectancy, perc_diabetic)
p4 = ggcorrplot(cor(health_outcomes),
colors = c("blue", "white", "red"),
hc.order = TRUE,
type = "lower",
lab = TRUE,
lab_size = 4,
ggtheme = ggplot2::theme_bw())
ggsave(filename = "results/corr-health_outcomes.png",
plot = p4,
device = "png",
width = 5,
height = 5)
# correlated features - health-behavior
health_behavior = mental_health_train %>%
select(perc_smokers, perc_obese,
perc_physically_inactive,
perc_excessive_drinking,
chlamydia_rate, teen_birth_rate,
perc_insufficient_sleep, perc_food_insecure)
p5 = ggcorrplot(cor(health_behavior),
colors = c("blue", "white", "red"),
hc.order = TRUE,
type = "lower",
lab = TRUE,
lab_size = 2,
tl.cex = 7,
ggtheme = ggplot2::theme_bw())
ggsave(filename = "results/corr-health_behavior.png",
plot = p5,
device = "png",
width = 5,
height = 5)
# correlated features - clinical care
clinical_care = mental_health_train %>%
select(perc_uninsured, pcp_rate, dentist_rate,
mhp_rate, prevent_hosp_rate,
perc_mammography_screened, perc_flu_vaccinated)
p6 = ggcorrplot(cor(clinical_care),
colors = c("blue", "white", "red"),
hc.order = TRUE,
type = "lower",
lab = TRUE,
lab_size = 3,
tl.cex = 8,
ggtheme = ggplot2::theme_bw())
ggsave(filename = "results/corr-clinical-care.png",
plot = p6,
device = "png",
width = 5,
height = 5)
# correlated features - social_environment
social_economic_environment = mental_health_train %>%
select(graduation_rate, perc_some_college,
perc_unemployed, perc_children_in_poverty,
perc_single_parent_households,
association_rate, violent_crime_rate,
injury_death_rate, household_income,
perc_free_or_reduced_lunch, perc_homeowners,
household_has_broadband,
household_has_computer, household_has_smartphone,
housing_mobile_homes, per_capita_income,
persons_per_household, income_ratio,
perc_with_access, perc_limited_access, food_environment_index)
p7 = ggcorrplot(cor(social_economic_environment),
hc.order = FALSE,
type = "lower",
lab = TRUE,
lab_size = 1.5,
tl.cex = 6.5,
ggtheme = ggplot2::theme_bw())
ggsave(filename = "results/corr-social-economic-environment.png",
plot = p7,
device = "png",
width = 6,
height = 6)
physical_environment = mental_health_train %>%
select(average_daily_pm2.5, presence_of_violation, perc_severe_housing_cost_burden,
perc_severe_housing_problems,
overcrowding, inadequate_facilities, perc_drive_alone,
perc_long_commute_drives_alone, perc_rural)
p8 = ggcorrplot(cor(physical_environment),
colors = c("blue", "white", "red"),
hc.order = TRUE,
type = "lower",
lab = TRUE,
lab_size = 2,
tl.cex = 6.5,
outline.color = "gray",
ggtheme = ggplot2::theme_bw())
ggsave(filename = "results/corr-physical-environment.png",
plot = p8,
device = "png",
width = 5,
height = 5)
ggplot(data = mental_health_train,
aes(x = inadequate_facilities,
y = mentally_unhealthy)) +
geom_point() +
geom_jitter() +
xlab("Percentage of households without kitchen or plumbing facilities") +
ylab("Mentally Unhealthy") +
stat_smooth(method="glm", se=FALSE,
method.args = list(family=binomial),
color = "red") +
theme_bw() +
ggtitle("Inadequate Household Facilities")
# load libraries
library(tidyverse)
# read in the cleaned data
mental_health_clean = read_csv("data/clean/mental_health_clean.csv")
# read in training data
mental_health_train = read_csv("data/clean/mental_health_train.csv")
# health outcomes
# physically unhealthy days
p9 = ggplot(data = mental_health_train,
aes(x = physically_unhealthy_days,
y = mentally_unhealthy)) +
geom_point() +
geom_jitter() +
stat_smooth(method="glm", se=FALSE,
method.args = list(family=binomial),
color = "red") +
theme_bw() +
labs(x = "Physically Unhealthy Days", y = "Mentally Unhealthy") +
ggtitle("Physically Unhealthy Days")
ggsave(filename = "results/physically_unhealthy_days.png",
plot = p9,
device = "png",
width = 5,
height = 5)
# health behaviors
# smoking
p11 = ggplot(data = mental_health_train,
aes(x = perc_smokers,
y = mentally_unhealthy)) +
geom_point() +
geom_jitter() +
stat_smooth(method="glm", se=FALSE,
method.args = list(family=binomial),
color = "red") +
theme_bw() +
labs(x = "Percentage of adults that reported currently smoking", y = "Mentally Unhealthy") +
ggtitle("Smoking")
ggsave(filename = "results/smoking.png",
plot = p11,
device = "png",
width = 5,
height = 5)
# clinical care
# mhp rate
p13 = ggplot(data = mental_health_train,
aes(x = mhp_rate,
y = mentally_unhealthy)) +
geom_point() +
geom_jitter() +
xlab("Mental Health Providers per 100,000 population") +
ylab("Mentally Unhealthy") +
stat_smooth(method="glm", se=FALSE,
method.args = list(family=binomial),
color = "red") +
theme_bw() +
ggtitle("MHP Providers")
ggsave(filename = "results/mhp_rate.png",
plot = p13,
device = "png",
width = 5,
height = 5)
# social / economic environment
# household income
p14 = ggplot(data = mental_health_train,
aes(x = household_income,
y = mentally_unhealthy)) +
geom_point() +
geom_jitter() +
xlab("Household Income") +
ylab("Mentally Unhealthy") +
stat_smooth(method="glm", se=FALSE,
method.args = list(family=binomial),
color = "red") +
theme_bw() +
ggtitle("Household Income")
ggsave(filename = "results/household_income.png",
plot = p14,
device = "png",
width = 5,
height = 5)
# physical environment
# inadequate facilities
p16 = ggplot(data = mental_health_train,
aes(x = inadequate_facilities,
y = mentally_unhealthy)) +
geom_point() +
geom_jitter() +
xlab("Percentage of households without kitchen or plumbing facilities") +
ylab("Mentally Unhealthy") +
stat_smooth(method="glm", se=FALSE,
method.args = list(family=binomial),
color = "red") +
theme_bw() +
ggtitle("Inadequate Household Facilities")
ggsave(filename = "results/inadequate_facilities.png",
plot = p16,
device = "png",
width = 5,
height = 5)
p17 = ggplot(data = mental_health_train,
aes(x = perc_excessive_drinking,
y = mentally_unhealthy)) +
geom_point() +
geom_jitter() +
xlab("Percentage of adults that reported excessive drinking") +
ylab("Mentally Unhealthy") +
stat_smooth(method="glm", se=FALSE,
method.args = list(family=binomial),
color = "red") +
theme_bw() +
ggtitle("Excessive Drinking")
ggsave(filename = "results/excessive-drinking.png",
plot = p17,
device = "png",
width = 5,
height = 5)
# load libraries
library(tidyverse)
library(glmnetUtils)
library(pROC)
source("code/functions/plot_glmnet.R")
# read in the training data
mental_health_train = read_csv("data/clean/mental_health_train.csv")
# read in the testing data
mental_health_test = read_csv("data/clean/mental_health_test.csv")
# running a logistic regression
set.seed(1)
glm_fit = glm(mentally_unhealthy ~ . -mentally_unhealthy_days
-physically_unhealthy_days,
family = "binomial",
data = mental_health_train)
summary(glm_fit)
# extracting the fitted probabilities
fitted_probabilities = predict(glm_fit,
newdata = mental_health_test,
type = "response")
# make predictions
predictions = as.numeric(fitted_probabilities > 0.4)
head(predictions)
# evaluating the classifier
mental_health_test = mental_health_test %>%
mutate(predicted_mental_health = predictions)
# calculate misclassification rate
misclassification_regression = mental_health_test %>%
summarise(mean(mentally_unhealthy != predicted_mental_health))
misclassification_regression
# confusion matrix
mental_health_test %>%
select(mentally_unhealthy, predicted_mental_health) %>%
table()
# make predictions
predictions = as.numeric(fitted_probabilities > 0.3)
# evaluating the classifier
mental_health_test = mental_health_test %>%
mutate(predicted_mental_health = predictions)
# calculate misclassification rate
misclassification_regression = mental_health_test %>%
summarise(mean(mentally_unhealthy != predicted_mental_health))
misclassification_regression
# confusion matrix
mental_health_test %>%
select(mentally_unhealthy, predicted_mental_health) %>%
table()
# load libraries
library(glmnetUtils)
source("code/functions/plot_glmnet.R")
library(tidyverse)
library(kableExtra)
# run lasso regression
set.seed(1)
lasso_fit = cv.glmnet(mentally_unhealthy ~ . -mentally_unhealthy_days
-physically_unhealthy_days,
alpha = 1,
nfolds = 10,
family = "binomial",
type.measure = "class",
data = mental_health_train)
plot(lasso_fit)
plot_glmnet(lasso_fit, mental_health_train, features_to_plot = 10, lambda = lasso_fit$lambda.1se)
lasso_fit$nzero[lasso_fit$lambda == lasso_fit$lambda.1se]
# extract features selected by lasso and their coefficients
beta_hat_std = extract_std_coefs(lasso_fit, mental_health_train)
# visualize the fitted coefficients as a function of lambda
probabilities = predict(lasso_fit,
newdata = mental_health_test,
s = "lambda.1se",
type = "response") %>%
as.numeric()
# make predictions
predictions = as.numeric(probabilities > 0.3)
head(predictions)
# evaluating the classifier
mental_health_test = mental_health_test %>%
mutate(predicted_mental_health = predictions)
# calculate misclassification rate
misclassification_lasso = mental_health_test %>%
summarise(mean(mentally_unhealthy != predicted_mental_health))
misclassification_lasso
