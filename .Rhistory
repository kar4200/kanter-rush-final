- physically_unhealthy_days,
alpha = 0, nfolds = 10, family = "binomial",
type.measure = "class",  data = mental_health_train)
coef(ridge_fit, s = "lambda.1se") %>% head()
summary(ridge_fit)
coef(ridge_fit, s = "lambda.1se")
# extract features selected by lasso and their coefficients
beta_hat_std = extract_std_coefs(ridge_fit, mental_health_train)
beta_hat_std
# extract features selected by lasso and their coefficients
beta_hat_std = extract_std_coefs(ridge_fit, mental_health_train,
lambda = ridge_fit$lambda.1se)
beta_hat_std
# reminder when saving kable: set working dictionary to "results"
beta_hat_std %>%
filter(coefficient != 0) %>%
arrange(desc(abs(coefficient))) %>%
head(10) %>%
kable(format = "latex",
booktabs = TRUE,
col.names = c("Feature", "Coefficient"),
caption = "Top 10 features selected by ridge and their coefficients") %>%
save_kable("ridge-coefficients.pdf")
# visualize the fitted coefficients as a function of lambda
probabilities = predict(ridge_fit,
newdata = mental_health_test,
s = "lambda.1se",
type = "response") %>%
as.numeric()
head(probabilities)
# make predictions
predictions = as.numeric(probabilities > 0.5)
head(predictions)
# evaluating the classifier
mental_health_test = mental_health_test %>%
mutate(predicted_mental_health = predictions)
mental_health_test
# then calculate misclassification rate
mental_health_test %>%
summarise(mean(mentally_unhealthy != predicted_mental_health))
# load libraries
library(glmnetUtils)
source("code/functions/plot_glmnet.R")
library(tidyverse)
# read in the training data
mental_health_train = read_csv("data/clean/mental_health_train.csv")
# run lasso regression
set.seed(1)
plot(lasso_fit)
plot_glmnet(lasso_fit, mental_health_train, features_to_plot = 10)
plot_glmnet(lasso_fit, mental_health_train)
plot_glmnet(lasso_fit, mental_health_train, features_to_plot = 10)
# create lasso CV plot
png(width = 7,
height = 5,
res = 300,
units = "in",
filename = "results/lasso-cv-plot.png")
plot(lasso_fit)
# load libraries
library(rpart)         # to train decision trees
library(rpart.plot)    # to plot decision trees
library(randomForest)  # random forests
library(gbm)           # boosting
library(tidyverse)     # tidyverse
library(kableExtra)    # kable
# read in the training data
mental_health_train = read_csv("data/clean/mental_health_train.csv")
# read in the testing data
mental_health_test = read_csv("data/clean/mental_health_test.csv")
# fit classification tree based on Gini Index with default "control" parameters
set.seed(1)
mental_health_fit = rpart(mentally_unhealthy ~ . -mentally_unhealthy_days
-physically_unhealthy_days,
method = "class",
parms = list(split = "gini"),
data = mental_health_train)
rpart.plot(mental_health_fit)
# find deepest possible tree (to begin to find optimal tree)
set.seed(1)
mental_health_fit_deep = rpart(mentally_unhealthy ~ . -mentally_unhealthy_days
-physically_unhealthy_days,
method = "class",
control = rpart.control(minsplit = 2,
minbucket = 1,
cp = 0),
parms = list(split = "gini"),
data = mental_health_train)
cp_table = printcp(mental_health_fit_deep) %>%
as_tibble()
cp = cp_table %>%
filter(nsplit >= 2) %>%
ggplot(aes(x = nsplit+1, y = xerror,
ymin = xerror - xstd, ymax = xerror + xstd)) +
geom_point() +
geom_line() +
scale_x_log10() +
geom_errorbar(width = 0.1) +
xlab("Number of terminal nodes") + ylab("CV error") +
geom_hline(aes(yintercept = min(xerror)), linetype = "dashed") +
theme_bw()
cp
# find optimal tree
set.seed(1)
optimal_tree_info = cp_table %>%
filter(xerror - xstd < min(xerror)) %>%
arrange(nsplit) %>%
head(1)
optimal_tree_info$nsplit # 10 splits in the optimal tree
# prune the optimal tree
optimal_tree = prune(mental_health_fit_deep, cp = optimal_tree_info$CP)
classification = rpart.plot(optimal_tree)
classification
misclassification_decision <- mean(pred_decision !=
mental_health_test$mentally_unhealthy) # 9.07
# correlated features - clinical care
clinical_care = mental_health %>%
select(-c(fips, state, name)) %>%
select(perc_uninsured, pcp_rate, dentist_rate,
mhp_rate, prevent_hosp_rate,
perc_mammography_screened, perc_flu_vaccinated)
p6 = ggcorrplot(cor(clinical_care),
colors = c("blue", "white", "red"),
hc.order = TRUE,
type = "lower",
lab = TRUE,
lab_size = 3,
tl.cex = 8,
ggtheme = ggplot2::theme_bw())
p6
p6
# load libraries
library(tidyverse)
library(ggcorrplot)
# read in the cleaned data
mental_health = read_csv("data/clean/mental_health_clean.csv")
# correlated features - health_outcomes
health_outcomes = mental_health %>%
select(-c(fips, state, name)) %>%
select(physically_unhealthy_days,
life_expectancy, perc_diabetic)
p4 = ggcorrplot(cor(health_outcomes),
colors = c("blue", "white", "red"),
hc.order = TRUE,
type = "lower",
lab = TRUE,
lab_size = 4,
ggtheme = ggplot2::theme_bw())
p4
View(p14)
mental_health
p4
View(health_data_clean)
# load libraries
library(tidyverse)
# clean demographic data
demographic_data_clean = demographic_data %>%
select(c(fips, state, name, ends_with("_2019"))) %>%
select(c(fips, state, name, starts_with("household_has"),
housing_mobile_homes_2019, per_capita_income_2019,
persons_per_household_2019, veterans_2019))
names(demographic_data_clean) = gsub(pattern = "_2019", replacement = "",
x = names(demographic_data_clean))
write_csv(demographic_data_clean, file = "data/clean/demographic_data_clean.csv")
# clean health data
health_data_clean = health_data %>%
mutate(`Presence of violation` =
ifelse(`Presence of violation` == "Yes", 1, 0)) %>%
select(-c(starts_with(c("95%","Quartile", "#")),
ends_with(c("(Black)", "(White)", "(Hispanic)", "Ratio")),
c(Unreliable,
Population,
`Cohort Size`,
`Labor Force`,
`Annual Average Violent Crimes`)),
c(`Income Ratio`,
`Presence of violation`)) %>%
rename(fips = FIPS, state = State, name = County) %>%
mutate(fips = as.double(fips))
write_csv(health_data_clean, file = "data/clean/health_data_clean.csv")
# clean additional features
feature_data_clean = feature_data %>%
select(-c(starts_with(c("95%", "#")),
ends_with(c("(Black)","(White)","(Hispanic)",
"Mortality", "Mortality Rate", "Ratio")),
c(`Segregation Index`,
`% Disconnected Youth`,
`Segregation index`,
`Homicide Rate`,
`Firearm Fatalities Rate`,
`Other PCP Rate`))) %>%
rename(fips = FIPS, state = State, name = County) %>%
mutate(fips = as.double(fips))
write_csv(feature_data_clean, file = "data/clean/feature_data_clean.csv")
# join county health data with case data
mental_health = inner_join(health_data_clean,
feature_data_clean,
by = c("fips", "state", "name"))
mental_health = left_join(mental_health,
demographic_data_clean,
by = c("fips", "state")) %>%
select(-name.y)
# clean the joined datasets
mental_health_clean = mental_health %>%
select(-c(`Years of Potential Life Lost Rate`,
`HIV Prevalence Rate`,
starts_with("poverty"), `% LBW`,
`% Frequent Mental Distress`,
`% Fair/Poor`,
`80th Percentile Income`,
`20th Percentile Income`,
`% Frequent Physical Distress`,
`% Uninsured...56`,
`% Uninsured...60`,
Population)) %>%
na.omit() %>%
rename(name = name.x,
prevent_hosp_rate = `Preventable Hosp. Rate`,
perc_long_commute_drives_alone = `% Long Commute - Drives Alone`)
# table to determine which columns to remove
colSums(is.na(mental_health))
# rename columns for tidyness
names(mental_health_clean) = gsub(pattern = "% ", replacement = "perc ",
x = names(mental_health_clean))
names(mental_health_clean) = gsub(pattern = " ", replacement = "_",
x = names(mental_health_clean))
names(mental_health_clean) = gsub(pattern = "-", replacement = "_",
x = names(mental_health_clean))
names(mental_health_clean) = gsub(pattern = "<", replacement = "under",
x = names(mental_health_clean))
names(mental_health_clean) = gsub(pattern = "/", replacement = "_",
x = names(mental_health_clean))
names(mental_health_clean) = tolower(names(mental_health_clean))
# create binary response variable (mentally unhealthy: yes or no)
mental_health_clean %>%
summarise(mean = mean(mentally_unhealthy_days))
min(mental_health_clean$mentally_unhealthy_days) # 2.5
max(mental_health_clean$mentally_unhealthy_days) # 6
# set threshold for mentally unhealthy (yes vs. no) at 4.5 (justify later)
mental_health_clean = mental_health_clean %>%
mutate(mentally_unhealthy = ifelse(mentally_unhealthy_days >= 4.5, 1, 0))
# write cleaned data to file
write_csv(mental_health_clean, file = "data/clean/mental_health_clean.csv")
View(mental_health_clean)
# read in the cleaned data
mental_health = read_csv("data/clean/mental_health_clean.csv")
# set seed
set.seed(1)
mental_health_removed = mental_health %>%
select(-fips, -state, -name)
# split into train and test (80% for train and 20% for test)
n = nrow(mental_health_removed)
train_samples = sample(1:n, round(0.8*n))
# training set
mental_health_train = mental_health_removed %>%
filter(row_number() %in% train_samples)
length(mental_health_train)
length(mental_health_train$nrow)
length(nrow(mental_health_train))
mental_health_train
View(mental_health_train)
View(mental_health_test)
# running a logistic regression
glm_fit = glm(mentally_unhealthy ~ . -mentally_unhealthy_days
-physically_unhealthy_days,
family = "binomial",
data = mental_health_train)
summary(glm_fit)
summary(glm_fit)
## extracting elements of the fit
coef(glm_fit)
# extracting the fitted probabilities
fitted_probabilities = predict(glm_fit,
newdata = mental_health_test,
type = "response")
# running a logistic regression
glm_fit = glm(mentally_unhealthy ~ . -mentally_unhealthy_days
-physically_unhealthy_days,
family = "binomial",
data = mental_health_train)
summary(glm_fit)
# extracting the fitted probabilities
fitted_probabilities = predict(glm_fit,
newdata = mental_health_test,
type = "response")
# evaluating the classifier
mental_health_test = mental_health_test %>%
mutate(predicted_mental_health = predictions)
View(mental_health_clean)
colSums(is.na(mental_health_clean))
# download datasets
health_data <- read_csv("~/Desktop/stat-471-fall-2021/kanter-rush-final/data/raw/measure_data.csv")
feature_data <- read_csv("~/Desktop/stat-471-fall-2021/kanter-rush-final/data/raw/additional_features.csv")
# load libraries
library(tidyverse)
# clean demographic data
demographic_data_clean = demographic_data %>%
select(c(fips, state, name, ends_with("_2019"))) %>%
select(c(fips, state, name, starts_with("household_has"),
housing_mobile_homes_2019, per_capita_income_2019,
persons_per_household_2019, veterans_2019))
names(demographic_data_clean) = gsub(pattern = "_2019", replacement = "",
x = names(demographic_data_clean))
write_csv(demographic_data_clean, file = "data/clean/demographic_data_clean.csv")
# clean health data
health_data_clean = health_data %>%
mutate(`Presence of violation` =
ifelse(`Presence of violation` == "Yes", 1, 0)) %>%
select(-c(starts_with(c("95%","Quartile", "#")),
ends_with(c("(Black)", "(White)", "(Hispanic)", "Ratio")),
c(Unreliable,
Population,
`Cohort Size`,
`Labor Force`,
`Annual Average Violent Crimes`)),
c(`Income Ratio`,
`Presence of violation`)) %>%
rename(fips = FIPS, state = State, name = County) %>%
mutate(fips = as.double(fips))
write_csv(health_data_clean, file = "data/clean/health_data_clean.csv")
# clean additional features
feature_data_clean = feature_data %>%
select(-c(starts_with(c("95%", "#")),
ends_with(c("(Black)","(White)","(Hispanic)",
"Mortality", "Mortality Rate", "Ratio")),
c(`Segregation Index`,
`% Disconnected Youth`,
`Segregation index`,
`Homicide Rate`,
`Firearm Fatalities Rate`,
`Other PCP Rate`))) %>%
rename(fips = FIPS, state = State, name = County) %>%
mutate(fips = as.double(fips))
write_csv(feature_data_clean, file = "data/clean/feature_data_clean.csv")
# join county health data with case data
mental_health = inner_join(health_data_clean,
feature_data_clean,
by = c("fips", "state", "name"))
write_csv(feature_data_clean, file = "data/clean/feature_data_clean.csv")
# join county health data with case data
mental_health = inner_join(health_data_clean,
feature_data_clean,
by = c("fips", "state", "name"))
mental_health = left_join(mental_health,
demographic_data_clean,
by = c("fips", "state")) %>%
select(-name.y)
# clean the joined datasets
mental_health_clean = mental_health %>%
select(-c(`Years of Potential Life Lost Rate`,
`HIV Prevalence Rate`,
starts_with("poverty"), `% LBW`,
`% Frequent Mental Distress`,
`% Fair/Poor`,
`80th Percentile Income`,
`20th Percentile Income`,
`% Frequent Physical Distress`,
`% Uninsured...56`,
`% Uninsured...60`,
Population)) %>%
na.omit() %>%
rename(name = name.x,
prevent_hosp_rate = `Preventable Hosp. Rate`,
perc_long_commute_drives_alone = `% Long Commute - Drives Alone`)
# table to determine which columns to remove
colSums(is.na(mental_health))
# rename columns for tidyness
names(mental_health_clean) = gsub(pattern = "% ", replacement = "perc ",
x = names(mental_health_clean))
names(mental_health_clean) = gsub(pattern = " ", replacement = "_",
x = names(mental_health_clean))
names(mental_health_clean) = gsub(pattern = "-", replacement = "_",
x = names(mental_health_clean))
names(mental_health_clean) = gsub(pattern = "<", replacement = "under",
x = names(mental_health_clean))
names(mental_health_clean) = gsub(pattern = "/", replacement = "_",
x = names(mental_health_clean))
names(mental_health_clean) = tolower(names(mental_health_clean))
# create binary response variable (mentally unhealthy: yes or no)
mental_health_clean %>%
summarise(mean = mean(mentally_unhealthy_days))
min(mental_health_clean$mentally_unhealthy_days) # 2.5
max(mental_health_clean$mentally_unhealthy_days) # 6
# set threshold for mentally unhealthy (yes vs. no) at 4.5 (justify later)
mental_health_clean = mental_health_clean %>%
mutate(mentally_unhealthy = ifelse(mentally_unhealthy_days >= 4.5, 1, 0))
# write cleaned data to file
write_csv(mental_health_clean, file = "data/clean/mental_health_clean.csv")
# load libraries
library(tidyverse)
library(glmnetUtils)
library(pROC)
source("code/functions/plot_glmnet.R")
# read in the training data
mental_health_train = read_csv("data/clean/mental_health_train.csv")
# read in the testing data
mental_health_test = read_csv("data/clean/mental_health_test.csv")
# running a logistic regression
glm_fit = glm(mentally_unhealthy ~ . -mentally_unhealthy_days
-physically_unhealthy_days,
family = "binomial",
data = mental_health_train)
summary(glm_fit)
## extracting elements of the fit
coef(glm_fit)
# extracting the fitted probabilities
fitted_probabilities = predict(glm_fit,
newdata = mental_health_test,
type = "response")
# make predictions
predictions = as.numeric(fitted_probabilities > 0.5)
head(predictions)
# evaluating the classifier
mental_health_test = mental_health_test %>%
mutate(predicted_mental_health = predictions)
# calculate misclassification rate
mental_health_test %>%
summarise(mean(mentally_unhealthy != predicted_mental_health))
# confusion matrix
mental_health_test %>%
select(mentally_unhealthy, predicted_mental_health) %>%
table()
fpr = 19 / (370 + 19)
fnr = 17 / (68 + 17)
# ROC curve
roc_data = roc(mental_health_test %>%
pull(mentally_unhealthy),
fitted_probabilities)
# error message isn't warning? just showing what it is doing?
p_roc = tibble(FPR = 1-roc_data$specificities,
TPR = roc_data$sensitivities) %>%
ggplot(aes(x = FPR, y = TPR)) +
geom_line() +
xlab("False Positive Rate (FPR)") +
ylab("True Positive Rate (TPR)") +
geom_abline(slope = 1, linetype = "dashed", color = "red") +
geom_point(x = fpr, y = 1-fnr, colour = "red") +
theme_bw()
p_roc
# print the AUC
roc_data$auc
summary(glm_fit)
ridge_fit = cv.glmnet(mentally_unhealthy ~ . - mentally_unhealthy_days
- physically_unhealthy_days,
alpha = 0, nfolds = 10, family = "binomial",
type.measure = "class",  data = mental_health_train)
coef(ridge_fit, s = "lambda.1se")
beta_hat_std %>%
filter(coefficient != 0) %>%
arrange(desc(abs(coefficient))) %>%
head(10)
# optimal lambda value
lambda = ridge_fit$lambda.1se
lambda
# load libraries
library(glmnetUtils)
source("code/functions/plot_glmnet.R")
library(tidyverse)
# read in the training data
mental_health_train = read_csv("data/clean/mental_health_train.csv")
# run lasso regression
set.seed(1)
lasso_fit = cv.glmnet(mentally_unhealthy ~ . -mentally_unhealthy_days
-physically_unhealthy_days,
alpha = 1,
nfolds = 10,
data = mental_health_train)
plot(lasso_fit)
plot_glmnet(lasso_fit, mental_health_train, features_to_plot = 10)
# load libraries
library(glmnetUtils)
source("code/functions/plot_glmnet.R")
library(tidyverse)
# read in the training data
mental_health_train = read_csv("data/clean/mental_health_train.csv")
# run lasso regression
set.seed(1)
lasso_fit = cv.glmnet(mentally_unhealthy ~ . -mentally_unhealthy_days
-physically_unhealthy_days,
alpha = 1,
nfolds = 10,
data = mental_health_train)
plot(lasso_fit)
plot_glmnet(lasso_fit, mental_health_train, features_to_plot = 10)
# save the lasso fit object
save(lasso_fit, file = "results/lasso_fit.Rda")
# create lasso CV plot
png(width = 7,
height = 5,
res = 300,
units = "in",
filename = "results/lasso-cv-plot.png")
# create lasso trace plot
p_lasso = plot_glmnet(lasso_fit, mental_health_train, features_to_plot = 8)
p_lasso
View(p_lasso)
export(p_lasso)
# create lasso trace plot
p_lasso = plot_glmnet(lasso_fit, mental_health_train, features_to_plot = 8)
p_lasso
dev.on()
# running a logistic regression
set.seed(1)
glm_fit = glm(mentally_unhealthy ~ . -mentally_unhealthy_days
-physically_unhealthy_days,
family = "binomial",
data = mental_health_train)
summary(glm_fit)
# extract features selected by lasso and their coefficients
beta_hat_std = extract_std_coefs(ridge_fit, mental_health_train,
lambda = ridge_fit$lambda.1se)
plot(ridge_fit)
