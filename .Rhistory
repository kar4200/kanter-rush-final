source("code/functions/plot_glmnet.R")
library(tidyverse)
# read in the training data
mental_health_train = read_csv("data/clean/mental_health_train.csv")
# run lasso regression
set.seed(1)
# load libraries
library(glmnetUtils)
source("code/functions/plot_glmnet.R")
library(tidyverse)
# read in the training data
mental_health_train = read_csv("data/clean/mental_health_train.csv")
# read in the test
mental_health_test = read_csv("data/clean/mental_health_test.csv")
# run ridge regression
set.seed(1)
ridge_fit = cv.glmnet(mentally_unhealthy ~ . - mentally_unhealthy_days
- physically_unhealthy_days,
alpha = 0,
nfolds = 10,
family = "binomial",
type.measure = "class",
data = mental_health_train)
# save the ridge fit object
save(ridge_fit, file = "results/ridge_fit.Rda")
png(width = 7,
height = 5,
res = 300,
units = "in",
filename = "results/ridge-cv-plot.png")
plot(ridge_fit)
dev.off()
# create lasso trace plot
p_ridge = plot_glmnet(ridge_fit, mental_health_train, features_to_plot = 10, lambda = ridge_fit$lambda.1se)
ggsave(filename = "results/ridge-trace-plot.png",
plot = p_ridge,
device = "png",
width = 8,
height = 5)
# extract features selected by lasso and their coefficients
beta_hat_std = extract_std_coefs(ridge_fit, mental_health_train,
lambda = ridge_fit$lambda.1se)
setwd("~/Desktop/stat-471-fall-2021/kanter-rush-final/results")
# reminder when saving kable: set working dictionary to "results"
beta_hat_std %>%
filter(coefficient != 0) %>%
arrange(desc(abs(coefficient))) %>%
head(10) %>%
kable(format = "latex",
booktabs = TRUE,
col.names = c("Feature", "Coefficient")) %>%
save_kable("ridge-coefficients.pdf")
setwd("~/Desktop/stat-471-fall-2021/kanter-rush-final")
# visualize the fitted coefficients as a function of lambda
probabilities = predict(ridge_fit,
newdata = mental_health_test,
s = "lambda.1se",
type = "response") %>%
as.numeric()
# make predictions
predictions = as.numeric(probabilities > 0.5)
head(predictions)
# evaluating the classifier
mental_health_test = mental_health_test %>%
mutate(predicted_mental_health = predictions)
# calculate misclassification rate
misclassification_ridge = mental_health_test %>%
summarise(mean(mentally_unhealthy != predicted_mental_health))
misclassification_ridge
write_csv(misclassification_ridge, file = "results/misclassification_ridge.csv")
# load libraries
library(glmnetUtils)
source("code/functions/plot_glmnet.R")
library(tidyverse)
# read in the training data
mental_health_train = read_csv("data/clean/mental_health_train.csv")
# read in the test
mental_health_test = read_csv("data/clean/mental_health_test.csv")
# run lasso regression
set.seed(1)
lasso_fit = cv.glmnet(mentally_unhealthy ~ . -mentally_unhealthy_days
-physically_unhealthy_days,
alpha = 1,
nfolds = 10,
family = "binomial",
type.measure = "class",
data = mental_health_train)
plot(lasso_fit)
plot_glmnet(lasso_fit, mental_health_train, features_to_plot = 10, lambda = lasso_fit$lambda.1se)
lasso_fit$nzero[lasso_fit$lambda == lasso_fit$lambda.1se]
# save the lasso fit object
save(lasso_fit, file = "results/lasso_fit.Rda")
png(width = 7,
height = 5,
res = 300,
units = "in",
filename = "results/lasso-cv-plot.png")
plot(lasso_fit)
dev.off()
# create lasso trace plot
p_lasso = plot_glmnet(lasso_fit, mental_health_train, features_to_plot = 8)
ggsave(filename = "results/lasso-trace-plot.png",
plot = p_lasso,
device = "png",
width = 8,
height = 5)
# extract features selected by lasso and their coefficients
beta_hat_std = extract_std_coefs(lasso_fit, mental_health_train)
beta_hat_std %>%
filter(coefficient != 0) %>%
arrange(desc(abs(coefficient))) %>%
head(10)
setwd("~/Desktop/stat-471-fall-2021/kanter-rush-final/results")
# reminder when saving kable: set working dictionary to "results"
beta_hat_std %>%
filter(coefficient != 0) %>%
arrange(desc(abs(coefficient))) %>%
head(10) %>%
kable(format = "latex",
booktabs = TRUE,
col.names = c("Feature", "Coefficient")) %>%
save_kable("lasso-coefficients.pdf")
setwd("~/Desktop/stat-471-fall-2021/kanter-rush-final")
# visualize the fitted coefficients as a function of lambda
probabilities = predict(lasso_fit,
newdata = mental_health_test,
s = "lambda.1se",
type = "response") %>%
as.numeric()
head(probabilities)
# make predictions
predictions = as.numeric(probabilities > 0.5)
head(predictions)
# evaluating the classifier
mental_health_test = mental_health_test %>%
mutate(predicted_mental_health = predictions)
# calculate misclassification rate
misclassification_lasso = mental_health_test %>%
summarise(mean(mentally_unhealthy != predicted_mental_health))
misclassification_lasso
write_csv(misclassification_lasso, file = "results/misclassification_lasso.csv")
# load libraries
library(rpart)         # to train decision trees
library(rpart.plot)    # to plot decision trees
library(randomForest)  # random forests
library(gbm)           # boosting
library(tidyverse)     # tidyverse
library(kableExtra)    # kable
# read in the training data
mental_health_train = read_csv("data/clean/mental_health_train.csv")
# read in the testing data
mental_health_test = read_csv("data/clean/mental_health_test.csv")
# fit classification tree based on Gini Index with default "control" parameters
set.seed(1)
mental_health_fit = rpart(mentally_unhealthy ~ . -mentally_unhealthy_days
-physically_unhealthy_days,
method = "class",
parms = list(split = "gini"),
data = mental_health_train)
rpart.plot(mental_health_fit)
# find deepest possible tree (to begin to find optimal tree)
set.seed(1)
mental_health_fit_deep = rpart(mentally_unhealthy ~ . -mentally_unhealthy_days
-physically_unhealthy_days,
method = "class",
control = rpart.control(minsplit = 2,
minbucket = 1,
cp = 0),
parms = list(split = "gini"),
data = mental_health_train)
cp_table = printcp(mental_health_fit_deep) %>%
as_tibble()
# fit classification tree based on Gini Index with default "control" parameters
set.seed(1)
mental_health_fit_deep = rpart(mentally_unhealthy ~ . -mentally_unhealthy_days
-physically_unhealthy_days,
method = "class",
control = rpart.control(minsplit = 2,
minbucket = 1,
cp = 0),
parms = list(split = "gini"),
data = mental_health_train)
cp_table = printcp(mental_health_fit_deep) %>%
as_tibble()
cp = cp_table %>%
filter(nsplit >= 2) %>%
ggplot(aes(x = nsplit+1, y = xerror,
ymin = xerror - xstd, ymax = xerror + xstd)) +
geom_point() +
geom_line() +
scale_x_log10() +
geom_errorbar(width = 0.1) +
xlab("Number of terminal nodes") + ylab("CV error") +
geom_hline(aes(yintercept = min(xerror)), linetype = "dashed") +
theme_bw()
cp_table %>%
filter(nsplit >= 2) %>%
ggplot(aes(x = nsplit+1, y = xerror,
ymin = xerror - xstd, ymax = xerror + xstd)) +
geom_point() +
geom_line() +
scale_x_log10() +
geom_errorbar(width = 0.1) +
xlab("Number of terminal nodes") + ylab("CV error") +
geom_hline(aes(yintercept = min(xerror)), linetype = "dashed") +
theme_bw()
ggsave(filename = "results/cp-cv-chart.png",
plot = cp,
device = "png",
width = 6,
height = 6)
# find optimal tree
set.seed(1)
optimal_tree_info = cp_table %>%
filter(xerror - xstd < min(xerror)) %>%
arrange(nsplit) %>%
head(1)
optimal_tree_info$nsplit # 7 splits in the optimal tree
# read in the training data
mental_health_train = read_csv("data/clean/mental_health_train.csv")
# read in the testing data
mental_health_test = read_csv("data/clean/mental_health_test.csv")
# fit classification tree based on Gini Index with default "control" parameters
set.seed(1)
mental_health_fit = rpart(mentally_unhealthy ~ . -mentally_unhealthy_days
-physically_unhealthy_days,
method = "class",
parms = list(split = "gini"),
data = mental_health_train)
# find deepest possible tree (to begin to find optimal tree)
set.seed(1)
mental_health_fit_deep = rpart(mentally_unhealthy ~ . -mentally_unhealthy_days
-physically_unhealthy_days,
method = "class",
control = rpart.control(minsplit = 2,
minbucket = 1,
cp = 0),
parms = list(split = "gini"),
data = mental_health_train)
cp_table = printcp(mental_health_fit_deep) %>%
as_tibble()
cp = cp_table %>%
filter(nsplit >= 2) %>%
ggplot(aes(x = nsplit+1, y = xerror,
ymin = xerror - xstd, ymax = xerror + xstd)) +
geom_point() +
geom_line() +
scale_x_log10() +
geom_errorbar(width = 0.1) +
xlab("Number of terminal nodes") + ylab("CV error") +
geom_hline(aes(yintercept = min(xerror)), linetype = "dashed") +
theme_bw()
ggsave(filename = "results/cp-cv-chart.png",
plot = cp,
device = "png",
width = 6,
height = 6)
# find optimal tree
set.seed(1)
optimal_tree_info = cp_table %>%
filter(xerror - xstd < min(xerror)) %>%
arrange(nsplit) %>%
head(1)
optimal_tree_info$nsplit # 7 splits in the optimal tree
rpart.plot(mental_health_fit)
cp_table %>%
filter(nsplit >= 2) %>%
ggplot(aes(x = nsplit+1, y = xerror,
ymin = xerror - xstd, ymax = xerror + xstd)) +
geom_point() +
geom_line() +
scale_x_log10() +
geom_errorbar(width = 0.1) +
xlab("Number of terminal nodes") + ylab("CV error") +
geom_hline(aes(yintercept = min(xerror)), linetype = "dashed") +
theme_bw()
# prune the optimal tree
optimal_tree = prune(mental_health_fit_deep, cp = optimal_tree_info$CP)
rpart.plot(optimal_tree)
save(optimal_tree, file = "results/optimal_tree.Rda")
png(width = 8,
height = 8,
res = 300,
units = "in",
filename = "results/classification-tree.png")
rpart.plot(optimal_tree)
dev.off()
# misclassification
pred_decision = predict(optimal_tree,
newdata = mental_health_test, type = "class")
misclassification_decision = as_tibble(mean(pred_decision != mental_health_test$mentally_unhealthy)) # 9.07
misclassification_decision
write_csv(misclassification_decision, file = "results/misclassification_decision.csv")
# RANDOM FORESTS
set.seed(1)
rf_fit = randomForest(factor(mentally_unhealthy) ~ . -mentally_unhealthy_days -physically_unhealthy_days,
data = mental_health_train)
rf_fit$mtry
# tune random forests
set.seed(1)
View(mental_health_train)
# tune random forests
set.seed(1)
mvalues = seq.int(1, 60, by = 5)
oob_errors = numeric(length(mvalues))
ntree = 100
for(idx in 1:length(mvalues)){
m = mvalues[idx]
rf_fit_test = randomForest(factor(mentally_unhealthy) ~ . -mentally_unhealthy_days -physically_unhealthy_days,
mtry = m, data = mental_health_train)
oob_errors[idx] = rf_fit_test$err.rate[,"OOB"][ntree]
}
tibble(m = mvalues, oob_err = oob_errors) %>%
ggplot(aes(x = m, y = oob_err)) +
geom_line() + geom_point() +
scale_x_continuous(breaks = mvalues) +
theme_bw()
png(width = 7,
height = 7,
res = 300,
units = "in",
filename = "results/rf-cv-plot.png")
# tune random forest
set.seed(1)
rf_fit_tuned = randomForest(factor(mentally_unhealthy) ~ . -mentally_unhealthy_days -physically_unhealthy_days,
mtry = 36,
ntree = 500,
importance = TRUE,
data = mental_health_train)
save(rf_fit_tuned, file = "results/rf_fit_tuned.Rda")
# variable importance
var_imp = varImpPlot(rf_fit_tuned, n.var = 10, cex = 0.5)
varImpPlot(rf_fit_tuned, n.var = 10, cex = 0.5)
varImpPlot(rf_fit_tuned, n.var = 10, cex = 0.5)
var_imp
varImpPlot(rf_fit_tuned, n.var = 10, cex = 0.5)
varImpPlot(rf_fit_tuned, n.var = 10, cex = 0.5)
varImpPlot(rf_fit_tuned, n.var = 10, cex = 0.5)
# variable importance
var_imp = varImpPlot(rf_fit_tuned, n.var = 10, cex = 0.5)
var_imp
# misclassification error
pred_rf = predict(rf_fit_tuned, newdata = mental_health_test, type = "class")
pred_rf
misclassification_rf = as_tibble(mean(pred_rf != mental_health_test$mentally_unhealthy)) # 7.38
misclassification_rf
write_csv(misclassification_rf, file = "results/misclassification_rf.csv")
varImpPlot(rf_fit_tuned, n.var = 10, cex = 0.5)
# reading in misclassification errors
misclassification_regression = read_csv("results/misclassification_regression.csv")
misclassification_ridge = read_csv("results/misclassification_ridge.csv")
misclassification_lasso = read_csv("results/misclassification_lasso.csv")
misclassification_decision = read_csv("results/misclassification_decision.csv")
misclassification_rf = read_csv("results/misclassification_rf.csv")
# renaming column names
misclassification_regression = misclassification_regression %>%
rename(value = `mean(mentally_unhealthy != predicted_mental_health)`)
misclassification_ridge = misclassification_ridge %>%
rename(value = `mean(mentally_unhealthy != predicted_mental_health)`)
misclassification_lasso = misclassification_lasso %>%
rename(value = `mean(mentally_unhealthy != predicted_mental_health)`)
# creating table of misclassification errors
Model = c("Regression", "Ridge", "Lasso", "Decision", "Random Forest")
misclassification =
as_tibble(cbind(Model, rbind(misclassification_regression,
misclassification_ridge,
misclassification_lasso,
misclassification_decision,
misclassification_rf)))
misclassification
setwd("~/Desktop/stat-471-fall-2021/kanter-rush-final/results")
misclassification =
as_tibble(cbind(Model, rbind(misclassification_regression,
misclassification_ridge,
misclassification_lasso,
misclassification_decision,
misclassification_rf))) %>%
kable(format = "latex",
booktabs = TRUE,
digits = 4,
col.names = c("Feature", "Coefficient")) %>%
save_kable("misclassification-error.pdf")
# load libraries
library(tidyverse)
# download datasets
health_data <- read_csv("~/Desktop/stat-471-fall-2021/kanter-rush-final/data/raw/measure_data.csv")
feature_data <- read_csv("~/Desktop/stat-471-fall-2021/kanter-rush-final/data/raw/additional_features.csv")
demographic_data <- read_csv("~/Desktop/stat-471-fall-2021/kanter-rush-final/data/raw/county_complete.csv")
# load libraries
library(tidyverse)
# clean demographic data
demographic_data_clean = demographic_data %>%
select(c(fips, state, name, ends_with("_2019"))) %>%
select(c(fips, state, name, starts_with("household_has"),
housing_mobile_homes_2019, per_capita_income_2019,
persons_per_household_2019, veterans_2019))
names(demographic_data_clean) = gsub(pattern = "_2019", replacement = "",
x = names(demographic_data_clean))
write_csv(demographic_data_clean, file = "data/clean/demographic_data_clean.csv")
setwd("~/Desktop/stat-471-fall-2021/kanter-rush-final")
# clean demographic data
demographic_data_clean = demographic_data %>%
select(c(fips, state, name, ends_with("_2019"))) %>%
select(c(fips, state, name, starts_with("household_has"),
housing_mobile_homes_2019, per_capita_income_2019,
persons_per_household_2019, veterans_2019))
names(demographic_data_clean) = gsub(pattern = "_2019", replacement = "",
x = names(demographic_data_clean))
# clean health data
health_data_clean = health_data %>%
mutate(`Presence of violation` =
ifelse(`Presence of violation` == "Yes", 1, 0)) %>%
select(-c(starts_with(c("95%","Quartile", "#")),
ends_with(c("(Black)", "(White)", "(Hispanic)", "Ratio")),
c(Unreliable,
`Cohort Size`,
`Annual Average Violent Crimes`,
`Severe Housing Cost Burden`,
`% Alcohol-Impaired`)),
c(`Income Ratio`)) %>%
rename(fips = FIPS, state = State, name = County) %>%
mutate(fips = as.double(fips))
write_csv(health_data_clean, file = "data/clean/health_data_clean.csv")
# clean additional features
feature_data_clean = feature_data %>%
select(-c(starts_with(c("95%", "#")),
ends_with(c("(Black)","(White)","(Hispanic)",
"Mortality", "Mortality Rate", "Ratio")),
c(`% Disconnected Youth`,
`Segregation index`,
`Segregation Index`,
`Homicide Rate`,
`Firearm Fatalities Rate`,
`Other PCP Rate`,
`Population`))) %>%
rename(fips = FIPS, state = State, name = County) %>%
mutate(fips = as.double(fips))
# join county health data with case data
mental_health = inner_join(health_data_clean,
feature_data_clean,
by = c("fips", "state", "name"))
mental_health = left_join(mental_health,
demographic_data_clean,
by = c("fips", "state")) %>%
select(-name.y)
# clean the joined datasets
mental_health_clean = mental_health %>%
select(-c(`Years of Potential Life Lost Rate`,
`HIV Prevalence Rate`,
starts_with("poverty"), `% LBW`,
`% Frequent Mental Distress`,
`% Fair/Poor`,
`80th Percentile Income`,
`20th Percentile Income`,
`% Frequent Physical Distress`,
`% Uninsured...56`,
`% Uninsured...60`)) %>%
na.omit() %>%
rename(name = name.x,
prevent_hosp_rate = `Preventable Hosp. Rate`,
perc_long_commute_drives_alone = `% Long Commute - Drives Alone`)
# rename columns for tidyness
names(mental_health_clean) = gsub(pattern = "% ", replacement = "perc ",
x = names(mental_health_clean))
names(mental_health_clean) = gsub(pattern = " ", replacement = "_",
x = names(mental_health_clean))
names(mental_health_clean) = gsub(pattern = "-", replacement = "_",
x = names(mental_health_clean))
names(mental_health_clean) = gsub(pattern = "<", replacement = "under",
x = names(mental_health_clean))
names(mental_health_clean) = gsub(pattern = "/", replacement = "_",
x = names(mental_health_clean))
names(mental_health_clean) = tolower(names(mental_health_clean))
# create binary response variable (mentally unhealthy: yes or no)
mental_health_clean %>%
summarise(mean = mean(mentally_unhealthy_days))
min(mental_health_clean$mentally_unhealthy_days) # 2.5
max(mental_health_clean$mentally_unhealthy_days) # 6
sd(mental_health_clean$mentally_unhealthy_days)
sd(mental_health_clean$mentally_unhealthy_days) # 0.58
# set threshold for mentally unhealthy (yes vs. no) at 4.5 (1 standard deviation above the mean)
mental_health_clean = mental_health_clean %>%
mutate(mentally_unhealthy = ifelse(mentally_unhealthy_days >= 4.5, 1, 0))
View(mental_health_clean)
sum(mental_health_clean$mentally_unhealthy)
# write cleaned data to file
write_csv(mental_health_clean, file = "data/clean/mental_health_clean.csv")
# load libraries
library(kableExtra)                     # for printing tables
library(cowplot)                        # for side by side plots
library(lubridate)                      # for dealing with dates
library(maps)                           # for creating maps
library(tidyverse)
# read in the cleaned data
mental_health_clean = read_csv("data/clean/mental_health_clean.csv")
health_total = read_csv("data/clean/health_data_clean.csv")
# create histogram of mentally unhealthy days in dataset
mean <- mean(mental_health_clean$mentally_unhealthy_days) # save the mean
cutoff <- 4.5 # save the cutoff
mental_health_clean %>%
ggplot(aes(x = mentally_unhealthy_days)) +
geom_histogram(fill = "light grey",
col = "black") +
geom_vline(xintercept = mean,
linetype = "dashed",
col = "red") +
geom_vline(xintercept = cutoff,
linetype = "dashed",
col = "blue") +
labs(x = "Mentally Unhealthy Days (Per Month)",
y = "Number of Counties") +
theme_bw()
